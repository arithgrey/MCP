#!/usr/bin/env python3
"""
Script de demostraci√≥n para la herramienta base_structure_inspector_microservice
"""
import asyncio
import json
from src.tools.structure_inspector import (
    BaseStructureInspector,
    inspect_microservice_structure,
    inspect_repository_structure
)


async def demo_microservice_inspection():
    """Demuestra la inspecci√≥n de un microservicio espec√≠fico"""
    print("üîç DEMOSTRACI√ìN: Inspecci√≥n de Microservicio")
    print("=" * 60)
    
    try:
        # Inspeccionar el MCP actual
        result = inspect_microservice_structure(".", ".")
        
        print(f"üìä Resultado de la inspecci√≥n:")
        print(f"   Servicio: {result.service}")
        print(f"   Estado: {result.status}")
        print(f"   Score: {result.score}/100")
        print(f"   Ruta: {result.path}")
        
        print(f"\n‚úÖ Verificaciones de estructura:")
        checks = result.structure_checks
        print(f"   Dockerfile: {'‚úÖ' if checks.Dockerfile else '‚ùå'}")
        print(f"   docker-compose.yml: {'‚úÖ' if checks.docker_compose_yml else '‚ùå'}")
        print(f"   .gitignore: {'‚úÖ' if checks.gitignore else '‚ùå'}")
        print(f"   Directorio tests/: {'‚úÖ' if checks.tests_dir_exists else '‚ùå'}")
        print(f"   Archivos de test: {'‚úÖ' if checks.tests_dir_has_files else '‚ùå'}")
        
        print(f"\n‚ö†Ô∏è  Calidad de configuraci√≥n:")
        quality = result.config_quality
        if quality.dockerfile_best_practices:
            print(f"   Dockerfile: {', '.join(quality.dockerfile_best_practices)}")
        if quality.compose_warnings:
            print(f"   docker-compose.yml: {', '.join(quality.compose_warnings)}")
        if quality.gitignore_warnings:
            print(f"   .gitignore: {', '.join(quality.gitignore_warnings)}")
        if quality.tests_warnings:
            print(f"   Tests: {', '.join(quality.tests_warnings)}")
        
        if result.recommendations:
            print(f"\nüí° Recomendaciones:")
            for i, rec in enumerate(result.recommendations, 1):
                print(f"   {i}. {rec}")
        
    except Exception as e:
        print(f"‚ùå Error durante la inspecci√≥n: {e}")


async def demo_repository_audit():
    """Demuestra la auditor√≠a completa del repositorio"""
    print(f"\nüèóÔ∏è  DEMOSTRACI√ìN: Auditor√≠a del Repositorio")
    print("=" * 60)
    
    try:
        # Auditor√≠a completa del repositorio
        result = inspect_repository_structure(".")
        
        print(f"üìä Resumen de la auditor√≠a:")
        print(f"   Estado general: {result.overall_status}")
        print(f"   Total de servicios: {result.total_services}")
        print(f"   Servicios completos: {result.complete_services}")
        print(f"   Servicios incompletos: {result.incomplete_services}")
        print(f"   Servicios con problemas: {result.poor_services}")
        print(f"   Score promedio: {result.average_score:.1f}/100")
        
        if result.services:
            print(f"\nüìã Detalle por servicio:")
            for service in result.services:
                status_emoji = {
                    "complete": "‚úÖ",
                    "incomplete": "‚ö†Ô∏è",
                    "poor": "‚ùå"
                }.get(service.status, "‚ùì")
                
                print(f"   {status_emoji} {service.service}: {service.status} (score: {service.score:.1f})")
                
                if service.recommendations:
                    print(f"      Recomendaciones: {len(service.recommendations)}")
        
    except Exception as e:
        print(f"‚ùå Error durante la auditor√≠a: {e}")


async def demo_custom_inspection():
    """Demuestra la inspecci√≥n personalizada"""
    print(f"\nüéØ DEMOSTRACI√ìN: Inspecci√≥n Personalizada")
    print("=" * 60)
    
    try:
        # Crear inspector personalizado
        inspector = BaseStructureInspector(".")
        
        # Verificar si el directorio actual es un microservicio
        is_microservice = inspector._is_microservice_directory(inspector.base_path)
        print(f"¬øEs el directorio actual un microservicio? {'‚úÖ S√≠' if is_microservice else '‚ùå No'}")
        
        # Detectar servicios autom√°ticamente
        services = inspector._auto_detect_services()
        print(f"Servicios detectados autom√°ticamente: {services}")
        
        # Mostrar patrones de validaci√≥n
        print(f"\nüîç Patrones de validaci√≥n configurados:")
        print(f"   Dockerfile: {len(inspector.dockerfile_patterns)} patrones")
        print(f"   docker-compose.yml: {len(inspector.compose_patterns)} patrones")
        print(f"   .gitignore: {len(inspector.gitignore_patterns)} patrones")
        print(f"   Tests: {len(inspector.test_patterns)} patrones")
        
    except Exception as e:
        print(f"‚ùå Error durante la inspecci√≥n personalizada: {e}")


async def main():
    """Funci√≥n principal de demostraci√≥n"""
    print("üöÄ DEMOSTRACI√ìN DE BASE_STRUCTURE_INSPECTOR_MICROSERVICE")
    print("=" * 80)
    print("Esta herramienta verifica si cada microservicio cumple con los est√°ndares")
    print("t√©cnicos m√≠nimos de arquitectura moderna.\n")
    
    # Ejecutar demostraciones
    await demo_microservice_inspection()
    await demo_repository_audit()
    await demo_custom_inspection()
    
    print(f"\nüéâ Demostraci√≥n completada!")
    print("La herramienta est√° lista para ser usada a trav√©s del MCP.")


if __name__ == "__main__":
    asyncio.run(main()) 