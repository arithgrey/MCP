#!/usr/bin/env python3
"""
Test espec√≠fico para la prevenci√≥n de rutas relativas problem√°ticas
"""
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path para imports
sys.path.insert(0, str(Path(__file__).parent))

from src.tools.prevention_tools import get_prevention_status
from src.tools.file_preventor import FilePreventor
from src.tools.template_loader import TemplateLoader

def test_path_prevention():
    """Prueba la prevenci√≥n de rutas relativas problem√°ticas"""
    print("üß™ TESTING PREVENCI√ìN DE RUTAS RELATIVAS PROBLEM√ÅTICAS")
    print("=" * 70)
    
    # Test 1: Verificar que la regla de prevenci√≥n de rutas est√© activa
    print("\n1Ô∏è‚É£  Verificando regla de prevenci√≥n de rutas...")
    status = get_prevention_status(".")
    if status["success"]:
        print("‚úÖ Estado de prevenci√≥n obtenido correctamente")
        print(f"   - Reglas totales: {status['total_rules']}")
        print(f"   - Makefiles bloqueados: {status['prevention_rules']['makefiles']['enabled']}")
        print(f"   - Scripts .sh bloqueados: {status['prevention_rules']['shell_scripts']['enabled']}")
        
        # Verificar si existe la regla de prevenci√≥n de rutas
        if 'path_prevention' in status['prevention_rules']:
            print(f"   - Rutas relativas bloqueadas: {status['prevention_rules']['path_prevention']['enabled']}")
        else:
            print("   ‚ùå Regla de prevenci√≥n de rutas no encontrada")
            return False
    else:
        print(f"‚ùå Error: {status['error']}")
        return False
    
    # Test 2: Verificar el FilePreventor directamente
    print("\n2Ô∏è‚É£  Verificando FilePreventor...")
    template_loader = TemplateLoader()
    template = template_loader.get_template()
    
    if hasattr(template, 'file_prevention') and template.file_prevention:
        file_preventor = FilePreventor(template.file_prevention)
        prevention_summary = file_preventor.get_prevention_summary(Path("."))
        
        print("‚úÖ FilePreventor configurado correctamente")
        print(f"   - Prevenci√≥n de rutas activa: {prevention_summary['path_prevention_enabled']}")
        print(f"   - Alternativas para rutas: {len(prevention_summary['path_alternatives'])} encontradas")
        
        # Mostrar algunas alternativas
        for alt in prevention_summary['path_alternatives'][:3]:
            print(f"     ‚Ä¢ {alt}")
    else:
        print("‚ùå FilePreventor no configurado")
        return False
    
    # Test 3: Crear un archivo de prueba con rutas problem√°ticas
    print("\n3Ô∏è‚É£  Creando archivo de prueba con rutas problem√°ticas...")
    test_file = Path("test_problematic_paths.py")
    
    problematic_content = '''
# Este archivo contiene rutas relativas problem√°ticas
import sys
sys.path.append("../")  # ‚ùå RUTA PROBLEM√ÅTICA
sys.path.append("./")   # ‚ùå RUTA PROBLEM√ÅTICA

from ..core.models import *  # ‚ùå IMPORT RELATIVO PROBLEM√ÅTICO
from .utils import *         # ‚ùå IMPORT RELATIVO PROBLEM√ÅTICO

# Rutas de archivos problem√°ticas
config_path = "../config/settings.yaml"  # ‚ùå RUTA PROBLEM√ÅTICA
data_path = "./data/input.csv"          # ‚ùå RUTA PROBLEM√ÅTICA
'''
    
    try:
        test_file.write_text(problematic_content)
        print("‚úÖ Archivo de prueba creado")
    except Exception as e:
        print(f"‚ùå Error creando archivo de prueba: {e}")
        return False
    
    # Test 4: Verificar que el FilePreventor detecte las rutas problem√°ticas
    print("\n4Ô∏è‚É£  Verificando detecci√≥n de rutas problem√°ticas...")
    
    can_create, error_msg, alternatives = file_preventor.can_create_file(test_file, Path("."))
    
    if not can_create:
        print("‚úÖ Ruta problem√°tica detectada correctamente")
        print(f"   - Mensaje de error: {error_msg}")
        print(f"   - Alternativas sugeridas: {len(alternatives)}")
        
        for alt in alternatives[:3]:
            print(f"     ‚Ä¢ {alt}")
    else:
        print("‚ùå Ruta problem√°tica NO detectada")
        return False
    
    # Test 5: Verificar que se permitan imports relativos v√°lidos
    print("\n5Ô∏è‚É£  Verificando imports relativos v√°lidos...")
    
    valid_content = '''
# Este archivo contiene imports relativos v√°lidos
from . import utils          # ‚úÖ IMPORT RELATIVO V√ÅLIDO
from ..core import models    # ‚úÖ IMPORT RELATIVO V√ÅLIDO

# Rutas absolutas v√°lidas
from src.tools import FilePreventor  # ‚úÖ IMPORT ABSOLUTO
from pathlib import Path             # ‚úÖ IMPORT EST√ÅNDAR
'''
    
    valid_file = Path("test_valid_paths.py")
    valid_file.write_text(valid_content)
    
    can_create_valid, _, _ = file_preventor.can_create_file(valid_file, Path("."))
    
    if can_create_valid:
        print("‚úÖ Imports relativos v√°lidos permitidos correctamente")
    else:
        print("‚ùå Imports relativos v√°lidos bloqueados incorrectamente")
        return False
    
    # Limpiar archivos de prueba
    test_file.unlink(missing_ok=True)
    valid_file.unlink(missing_ok=True)
    
    print("\nüéâ TODOS LOS TESTS DE PREVENCI√ìN DE RUTAS PASARON EXITOSAMENTE!")
    print("üõ°Ô∏è  El sistema previene rutas relativas problem√°ticas correctamente")
    return True

if __name__ == "__main__":
    success = test_path_prevention()
    sys.exit(0 if success else 1) 